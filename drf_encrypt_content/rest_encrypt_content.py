from django.conf import settings
from cryptography.fernet import Fernet


class RestEncryptContent:
    """
        we can transfer data in the encrypted form using symmetric encryption.
        the parties who has the key are able to decrypt the encrypted data.
    """
    try:
        REST_ENCRYPT_SECRET_KEY = getattr(settings, 'REST_ENCRYPT_SECRET_KEY')
    except AttributeError as e:
        e.args = ('Provide the REST_ENCRYPT_SECRET_KEY in settings with the key generated by generate_key command.',)
        raise

    fernet = Fernet(REST_ENCRYPT_SECRET_KEY)

    def encrypt_data(self, data: str):
        """
            returns: fernet token which is the encrypted form of passed data.
        """
        return self.fernet.encrypt(self.encode_data(data))

    def encode_data(self, data: str):
        """
            converting strings to bytes is suitable for encryption,
            encode() method encodes data using utf-8 codec.
        """
        return data.encode()

    def encrypt_list(self, unencrypted: list):
        """
            iterates an unencrypted list and encrypt items in the list.
            returns:  a list of encrypted data.
        """
        temp_list = list()
        for data in unencrypted:
            temp_list.append(self.encrypt_data(str(data)))

        return temp_list
